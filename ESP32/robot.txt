/*		Ruairi Doherty
 * 		Created on 29/01/2020
 * 		Final Year Project - Remote-Robot
 * 		Robot Module
 */

#include "freertos/FreeRTOS.h"
#include "esp_wifi.h"
#include "esp_system.h"
#include "esp_event.h"
#include <esp_log.h>
#include <string.h>
#include "nvs_flash.h"
#include "driver/gpio.h"
#include "driver/adc.h"
#include "driver/ledc.h"
#include <driver/i2c.h>
#include "sdkconfig.h"
#include "esp_netif.h"
#include "esp_now.h"

uint8_t gloveModuleAddress[] = { 0x3C, 0x71, 0xBF, 0xA1, 0x34, 0x88 };

int16_t incomingX;
int16_t incomingY;
int16_t incomingZ;

int16_t dataRx[6];

void on_data_receive(const uint8_t* mac_addr, const int16_t* data, int len)
{
	printf("***Connected to Glove Module***\n");
	for(;;)
	{
		memcpy(&dataRx, data, sizeof(dataRx));
		printf("Bytes received: %d\n", len);
		incomingX = dataRx[0] | dataRx[1];
		incomingY = dataRx[2] | dataRx[3];
		incomingZ = dataRx[4] | dataRx[5];
		printf("accelX: %d, accelY: %d, accelZ: %d\n", incomingX, incomingY, incomingZ);
		vTaskDelay(pdMS_TO_TICKS(1000));
	}
	vTaskDelete(NULL);
}

void wifi_init(void* pvParameters)
{
	wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
	ESP_ERROR_CHECK(esp_wifi_init(&cfg));
	ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));
	ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
	ESP_ERROR_CHECK(esp_wifi_start());

	ESP_ERROR_CHECK(esp_now_init());
	esp_now_peer_info_t peerInfo;
	memcpy(peerInfo.peer_addr, gloveModuleAddress, 6);
	peerInfo.ifidx = WIFI_IF_STA;
	peerInfo.channel = 0;
	peerInfo.encrypt = false;
	if(esp_now_add_peer(&peerInfo) != ESP_OK) {
		printf("Failed to add peer\n");
	}
	else {
		printf("Successfully added peer\n");
	}

	esp_now_register_recv_cb(on_data_receive);

	for(;;) {

		//printf("Running\n");
		/*if(SYSTEM_EVENT_AP_STACONNECTED == true) {
			printf("Station connected\n");
		}
		else if(SYSTEM_EVENT_AP_STADISCONNECTED == true) {
			printf("Station disconnected\n");
		}*/
		vTaskDelay(pdMS_TO_TICKS(1000));
	}
	vTaskDelete(NULL);
}

void app_main(void)
{
	nvs_flash_init();
	xTaskCreate(&wifi_init, "wifi_init", 4096, NULL, 6, NULL);
}
